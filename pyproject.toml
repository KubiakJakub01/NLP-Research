[project]
name = "nlp_research"
version = "0.1.0"
description = "NLP Research"
readme = "README.md"
requires-python = ">=3.10,<3.11"

dependencies = [
    "coloredlogs>=15.0.1",
    "torch>=2.6.0",
    "torchaudio>=2.6.0",
    "torchvision>=0.21.0",
    "datasets>=2.14.5",
    "einops>=0.6.1",
    "stubs>=1.0.0",
    "transformers>=4.37.1",
    "pesq>=0.0.4",
    "pystoi>=0.4.1",
    "sox>=1.4.1",
    "matplotlib>=3.8.3",
    "faster-whisper>=1.0.0",
    "ffmpeg>=1.4",
    "whisperx>=1.0.0",
    "nvidia-cublas-cu11>=11.11.3.6",
    "nvidia-cudnn-cu11>=9.1.0.70",
    "evaluate>=0.4.2",
    "pydantic>=2.9.1",
    "nemo-toolkit>=1.23.0",
    "sentencepiece>=0.2.0",
    "pytorch-lightning>=2.4.0",
    "gradio>=4.19.2",
    "librosa>=0.10.1",
    "soundfile>=0.12.1",
    "opencv-python>=4.12.0.88",
    "speechbrain>=1.0.3",
    "mamba-ssm>=2.2.5",
    "argdantic>=1.3.3",
]

[dependency-groups]
dev = [
    "ipykernel>=6.29.5",
    "mypy==1.16.0",
    "pre-commit==4.2.0",
    "pylint==3.3.7",
    "ruff==0.11.13",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[[tool.uv.index]]
name = "pytorch-cu124"
url = "https://download.pytorch.org/whl/cu124"
explicit = true

[tool.uv.sources]
torch = [{ index = "pytorch-cu124" }]
torchvision = [{ index = "pytorch-cu124" }]
torchaudio = [{ index = "pytorch-cu124" }]

[tool.pylint]
max-line-length = 100
disable = ["missing-docstring",
            "invalid-name",
            "too-many-instance-attributes",
            "too-many-arguments",
            "method-hidden",
            "too-many-locals",
            "consider-using-from-import",
            "relative-beyond-top-level",
            "too-many-ancestors",
            "too-many-positional-arguments",
            "duplicate-code"]
fail-under = 10.0
generated-members=["numpy.*","torch.*", "numpy.random.*", "cv2.*"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 100
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
